---
title: HMPPS Architecture Blueprint
---

# HMPPS Architecture Blueprint

>This formative document guides teams in delivering digital products and services into HMPPS. If documentation is missing or isn't clear, please [let us know](https://mojdt.slack.com/archives/C049XU1LR6W).

This user guide is for teams with applications or services deployed on, or intending to deploy into HMPPS. It contains the blueprint for a reference architecture which has been designed to accommodate most services which will typically comprise:

* form based user input
* business logic
* storage of structured data

There may be justification for deviating from this reference architecture. If a domain team believes that this is the case for their domain, they should prepare a case for this deviation and discuss this with their assigned HMPPS Digital Technical Architect or open a discussion with the TA community at Slack Channel [#hmpps-technical-architecture](https://mojdt.slack.com/archives/CPT2USKRQ).

## Vision

HMPPS's Digital provision is conceived as a multi-tier, event-driven ecosystem of integrated services which help drive prison processes and enable prison staff to make informed decisions for prison operations. Its implementation will displace monolithic legacy services (e.g. [NOMIS][nomis]) as the authority system for prisons and probation administration and management.

[nomis]: documentation/legacy-systems.html#nomis

## [Principles](documentation/principles/principles-overview.html)

## Implementation Approaches

[Prison's Approach](documentation/products-domains/prisons-approach.html)

[Probation Approach](documentation/products-domains/probation-approach.html)

## Domains

Domains define specific bounded areas of related functionality and data. A domain service comprises the set of digital components required to address the business requirements pertaining to a domain and store & maintain data particular to that domain. A delivery team is responsible for developing/procuring these digital components.

#### HMPPS Domain Model
![](../images/hmpps-domains.png)

[Domain TA Allocation](https://docs.google.com/spreadsheets/d/1f-bNFhzCJ_HtSQGKMRxi-PeG6HSr1GhuhHBXvvx7_Q0/edit#gid=0)

#### Default Domain structure

The default structure should be sufficient to implement a domain in most cases but alternative structures may be considered if deemed necessary.

![](../images/domain-fundamentals-default-domain.drawio.png)

An HLD should be produced for the domain - and must be produced if the domain architecture deviates from the default. HLD examples are available from:

* [PICT](https://dsdmoj.atlassian.net/wiki/spaces/PIC/pages/1535705290)
* [PECS](https://dsdmoj.atlassian.net/wiki/spaces/PECS4/pages/1914306732)

### User interface

[User Interfaces](documentation/products-domains/user-interfaces.html) provide facilities to view, create, manage and maintain the domain's data. It is likely that the user interface will require data from other domains and these may be retrieved by accessing their respective domain APis.

### Orchestration Layer

This organises the data required by the front end service into a readily consumable form. It is recommended that a dedicated service is deployed to contain this orchestration from the outset. If it is known that this will always be simple, a domain team may consider incorporating this orchestration into the front end service.

### Domain APIs

The Domain APIs are used to gain access to a domain's data. [This area](documentation/products-domains/domain-apis.html) contains further detail.

### Subdomain Microservices

Theses tore and manage the domain's data. There is no hard and fast rule on how big or small these microservices should be - they should be "just big enough" and "not too big". Further detail is available [here](documentation/products-domains/microservices.html).

Even if implemented with a number of microservices, **domain data** may be stored in single instance of a Cloud Platform provided AWS RDS PostgreSQL database. Procurement details maybe be found [here](https://github.com/ministryofjustice/cloud-platform-terraform-rds-instance)

### Events

The domain must publish business level within its scope which other domains may listen out and react accordingly. These events should be published to [HMPPS Domain Events][hmpps-domain-events].

The domain may need to react to business events occurring outside its scope of responsibility i.e. occurring in another domain. It is the responsibility of this domain to listen out for events it is interested in and react according. Events are skinny by default - a domain consuming an event may need to call out to the publishing domain's API to obtain full data regarding the event.

[hmpps-domain-events]: ../documentation/common-components/domain-events.html

### Source Code Storage

All HMPPS source code is stored in the [Ministry Of Justice GitHub Repository](https://github.com/orgs/ministryofjustice)

### Deployment Roadmap

Details available [here](documentation/products-domains/domain-roadmap.html)

## Core Domains

Core Domains manage and hold data which is used by many other domains.

### [Core Person](documentation/core-domains/core-person.html)
### [Prisoner Location](documentation/core-domains/prisoner-location.html)
### [Prisoner Timetable](documentation/core-domains/prisoner-timetable.html)
### [Sentence and Offence](documentation/core-domains/sentence-and-offence.html)
### [Court Register](documentation/core-domains/court-register.html)

## Common Components

Common Components address cross-cutting concerns applicable to all domains.

Many common components are used across MOJ and are developed and supported by [Operations Engineering][operations-engineering]

[operations-engineering]: https://operations-engineering.service.justice.gov.uk/documentation/services.html#our-services

Those specific to HMPPS' needs are delivered by the **Core Components** service area.

### [Business Metrics](documentation/common-components/business-metrics.html)
### [Domain Events](documentation/common-components/domain-events.html)
### [Monitoring](documentation/common-components/monitoring.html)
### [System Logging](documentation/common-components/system-logging.html)
### [User Audit](documentation/common-components/user-audit.html)
### [User Authorisation](documentation/common-components/user-authorisation.html)

## Hosting

By default, domain services should be hosted in MOJ's Cloud Platform. Exceptions are possible of course but the team wishing to use alternative hosting arrangements must prepare present their case to [HMPPS Lead Architects](https://mojdt.slack.com/archives/C049XU1LR6W) for scrutiny and approval.

Details on using MOJ Cloud Platform are available [here](https://user-guide.cloud-platform.service.justice.gov.uk/)

* [Hosting Patterns](https://technical-guidance.service.justice.gov.uk/documentation/standards/hosting.html#how-to-host-services)

[Lens](https://k8slens.dev/) is a useful desktop tool for exploring a Kubernetes Cluster.

## Target Delivery Dates

- Take ownership of key prison data by end of 2023/24
- Users will be able to manage activities and appointments on DPS by Autumn 2024
- Prisoner's journeys into, out of and around the prison estate will be managed on DPS by 2025
- Case administration will be carried out on DPS by 2025
- Users will be able to manage safety of prisoners on DPS by 2025

## Links to other sources of Information

**HMPPS Technical**

* [Architectural Patterns and ADRs](https://dsdmoj.atlassian.net/wiki/spaces/NDSS/pages/1625292900/Patterns+and+ADRs)
* [DPS Tech Team Documentation](https://tech-docs.hmpps.service.justice.gov.uk)

**HMPPS Digital Operations**

* [Digital Prison Services Confluence Space](https://dsdmoj.atlassian.net/wiki/spaces/NOM/overview)
* [JIRA ticketing system](https://dsdmoj.atlassian.net/jira)

**MOJ Technical**

* [Technical Guidance](https://technical-guidance.service.justice.gov.uk)
* [Cloud Platform user guide](https://user-guide.cloud-platform.service.justice.gov.uk)
* [Modernisation Platform user guide](https://user-guide.modernisation-platform.service.justice.gov.uk/)
* [Architectural Principles](https://docs.google.com/document/d/1XBTuCw0y--4fZpHcTLWilSFx_qz3aewTiWYJGTZU4sA/edit)
* [MOJ Digital Forms](https://moj-forms.service.justice.gov.uk/)
* [MOJ Operations Engineering](https://operations-engineering.service.justice.gov.uk)

**HM Government**

* [GDS Service Standard](https://www.gov.uk/service-manual/service-standard)
* [Notifications - gov.uk Notify](https://www.notifications.service.gov.uk/)
* [Login - gov.uk One Login](https://www.sign-in.service.gov.uk/)
* [Payments - gov.uk Pay](https://www.payments.service.gov.uk/)

For instruction on how to revise this site and troubleshooting, please see the [README] file in the project repository.

[README]: https://github.com/ministryofjustice/hmpps-architecture-blueprint
